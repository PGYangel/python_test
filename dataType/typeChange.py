'''
有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
'''
'''------------------------------------------------------------------------------------------------------------------'''
'''
将x转换为一个整数
int(x [,base])
class int(x, base=10)
x -- 字符串或数字。
base -- 进制数，默认十进制。
'''
int()  # 不传入参数时，得到结果0
# 0
int(3)
# 3
int(3.6)
# 3
int('12', 16)  # 如果是带参数base的话，12要以字符串的形式进行输入，12 为 16进制
# 18
int('0xa', 16)
# 10
int('10', 8)
# 8
'''------------------------------------------------------------------------------------------------------------------'''
'''
将x转换为一个长整数
long(x [,base] )
class long(x, base=10)
x -- 字符串或数字。
base -- 可选，进制数，默认十进制。
long()
# 0L
注意：python3中没有long类型，只有int类型
'''
'''------------------------------------------------------------------------------------------------------------------'''
'''
将x转换到一个浮点数
float(x)
class float([x])
x -- 整数或字符串
'''
float(1)
# 1.0
float(-123.6)
# -123.6
float('123')     # 字符串
# 123.0
'''------------------------------------------------------------------------------------------------------------------'''
'''
创建一个复数
complex(real [,imag])
class complex([real[, imag]])
real -- int, long, float或字符串；
imag -- int, long, float；
'''
complex(1, 2)
# (1 + 2j)
complex(1)    # 数字
# (1 + 0j)
complex("1")  # 当做字符串处理
#(1 + 0j)

# 注意：这个地方在"+"号两边不能有空格，也就是不能写成"1 + 2j"，应该是"1+2j"，否则会报错
complex("1+2j")
#(1 + 2j)
'''------------------------------------------------------------------------------------------------------------------'''
'''
将对象 x 转换为字符串
str(x)
class str(object='')
object -- 对象。
'''
s = 'RUNOOB'
str(s)
# 'RUNOOB'
dict = {'runoob': 'runoob.com', 'google': 'google.com'};
str(dict)
# "{'google': 'google.com', 'runoob': 'runoob.com'}"
'''------------------------------------------------------------------------------------------------------------------'''
'''
将对象 x 转换为表达式字符串
repr(x)
repr(object)
object -- 对象。
'''
s = 'RUNOOB'
repr(s)
# "'RUNOOB'"
dict = {'runoob': 'runoob.com', 'google': 'google.com'};
repr(dict)
# "{'google': 'google.com', 'runoob': 'runoob.com'}"
'''
1、内建函数str()和repr() 或反引号操作符（``）可以方便地以字符串的方式获取对象的内容、类型、数值属性等信息。
2、str()函数得到的字符串可读性好（故被print调用）
3、repr()函数得到的字符串通常可以用来重新获得该对象，通常情况下 obj==eval(repr(obj)) 这个等式是成立的。这两个函数接受一个对象作为其参数，返回适当的字符串。
4、事实上repr()和``做一样的事情，返回一个对象的“官方”字符串表示。其结果绝大多数情况下（不是所有）可以通过求值运算（内建函数eval()）重新得到该对象。
str()则不同，它生成一个对象的可读性好的字符串表示，结果通常无法用eval()求值，但适合print输出。
'''
'''------------------------------------------------------------------------------------------------------------------'''
'''
用来计算在字符串中的有效Python表达式,并返回一个对象
eval(str)
eval(expression[, globals[, locals]])
expression -- 表达式。
globals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。
locals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。
'''
x = 7
eval( '3 * x' )
# 21
eval('pow(2,2)')
# 4
eval('2 + 2')
# 4
n=81
eval("n + 4")
# 85
'''------------------------------------------------------------------------------------------------------------------'''
